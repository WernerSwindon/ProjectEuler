using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Project Euler Puzzle Solution\r\n");
            Console.WriteLine("Question 1 : " + Question1()); // Completed
            Console.WriteLine("Question 2 : " + Question2()); // Completed
            Console.WriteLine("Question 3 : " + Question3()); // WIP
            Console.WriteLine("Question 4 : " + Question4()); // Completed
            Console.WriteLine("Question 5 : " + Question5()); // Completed
            Console.WriteLine("Question 6 : " + Question6()); // Completed
            Console.WriteLine("Question 7 : " + Question7()); // Completed
            Console.WriteLine("Question 8 : " + Question8()); // Completed
            Console.WriteLine("Question 9 : " + Question9()); // Completed
            Console.WriteLine("Question 10 : " + Question10()); // Completed


            Console.WriteLine("\r\nPress <enter> to exit....");
            Console.ReadLine();
        }

        private static String Question1()
        {
            // If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.The sum of these multiples is 23.
            // Find the sum of all the multiples of 3 or 5 below 1000.
            int Result = 0;

            for (int x = 0; x < 1000; x++)
                if (x % 3 == 0 || x % 5 == 0)
                    Result += x;

            return Result.ToString();
        }

        private static String Question2()
        {
            // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
            // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms

            int PrevValue = 1;
            int NextValue = 2;
            int Sum = NextValue;

            while (NextValue < 4000000)
            {
                int tempPrevValue = PrevValue;
                PrevValue = NextValue;
                NextValue = tempPrevValue + NextValue;

                if (NextValue % 2 == 0)
                    Sum += NextValue;
            }

            return Sum.ToString();
        }

        private static String Question3()
        {
            // The prime factors of 13195 are 5, 7, 13 and 29.
            // What is the largest prime factor of the number 600851475143 ?

            long Number = 600851475143;
            int MaxPrime = 2;
            int Prime = 2;

            while (MaxPrime < Number)
            {
                if (Number % Prime == 0)
                {
                    Number = Number / Prime;
                }
                else
                {
                    MaxPrime = Prime;
                    Prime = NextPrime(Prime);
                }
            }

            return MaxPrime.ToString();
        }

        private static String Question4()
        {
            // A palindromic number reads the same both ways. The largest palindrome made from the product of two 2 - digit numbers is 9009 = 91 × 99.
            // Find the largest palindrome made from the product of two 3 - digit numbers.

            int Result = 0;

            for (int x = 999; x > 99; x--)
            {
                for (int y = 999; y > 99; y--)
                {
                    int temp = x * y;
                    if (temp.ToString() == Reverse(temp.ToString()) && (temp > Result))
                        Result = temp;
                }
            }

            return Result.ToString();
        }

        private static String Question5()
        {
            // 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
            // What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?

            int Result = 1;
            bool Found = false;

            while (!Found)
            {
                Found = true;

                for (int x = 1; x <= 20; x++)
                {
                    if (Result % x != 0)
                    {
                        Found = false;
                        Result++;
                    }
                }
            }

            return Result.ToString();
        }

        private static String Question6()
        {
            // The sum of the squares of the first ten natural numbers is,

            // 12 + 22 + ... + 102 = 385
            // The square of the sum of the first ten natural numbers is,

            // (1 + 2 + ... + 10)2 = 552 = 3025
            // Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

            // Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

            int Sum1 = 0;
            int Sum2 = 0;

            for (int x = 1; x <= 100; x++)
            {
                Sum1 += (int)Math.Pow(x, 2);
                Sum2 += x;
            }

            Sum2 = (int)Math.Pow(Sum2, 2);

            return (Sum2 - Sum1).ToString();
        }

        private static String Question7()
        {
            // By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
            // What is the 10 001st prime number ?

            int Prime = 2;

            for (int x = 2; x <= 10001; x++)
            {
                Prime = NextPrime(Prime);
            }

            return Prime.ToString();
        }

        private static String Question8()
        {
            // The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
            // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

            string Numbers = "73167176531330624919225119674426574742355349194934" +
                             "96983520312774506326239578318016984801869478851843" +
                             "85861560789112949495459501737958331952853208805511" +
                             "12540698747158523863050715693290963295227443043557" +
                             "66896648950445244523161731856403098711121722383113" +
                             "62229893423380308135336276614282806444486645238749" +
                             "30358907296290491560440772390713810515859307960866" +
                             "70172427121883998797908792274921901699720888093776" +
                             "65727333001053367881220235421809751254540594752243" +
                             "52584907711670556013604839586446706324415722155397" +
                             "53697817977846174064955149290862569321978468622482" +
                             "83972241375657056057490261407972968652414535100474" +
                             "82166370484403199890008895243450658541227588666881" +
                             "16427171479924442928230863465674813919123162824586" +
                             "17866458359124566529476545682848912883142607690042" +
                             "24219022671055626321111109370544217506941658960408" +
                             "07198403850962455444362981230987879927244284909188" +
                             "84580156166097919133875499200524063689912560717606" +
                             "05886116467109405077541002256983155200055935729725" +
                             "71636269561882670428252483600823257530420752963450";

            long MaxProduct = 0;
            int Digits = 13;

            for (int x = 0; x <= Numbers.Count() - Digits; x++)
            {
                long Temp = 1;

                foreach (char c in Numbers.Substring(x, Digits))
                {
                    Temp *= Convert.ToInt32(c.ToString());
                }

                if (Temp > MaxProduct)
                {
                    MaxProduct = Temp;
                }
            }

            return MaxProduct.ToString();
        }

        private static String Question9()
        {
            // A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

            // a2 + b2 = c2
            // For example, 32 + 42 = 9 + 16 = 25 = 52.

            // There exists exactly one Pythagorean triplet for which a +b + c = 1000.
            // Find the product abc.

            long Result = 0;
            double C = 0;

            for (int A = 1; A < 1000; A++)
            {
                for (int B = 1; B < 1000; B++)
                {
                    C = Math.Sqrt((A * A) + (B * B));
                    long temp;

                    if (
                        long.TryParse(C.ToString(), out temp) &&
                        (A + B + (long)C) == 1000 &&
                        A < B &&
                        B < (long)C)
                    {
                        Result = A * B * (long)C;
                    }
                }
            }

            return Result.ToString();
        }

        private static String Question10()
        {
            // The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
            // Find the sum of all the primes below two million.

            int Prime = 2;
            long Sum = 2;
            int PrimeLim = 2000000;

            while (Prime < PrimeLim)
            {
                Prime = NextPrime(Prime);

                Console.WriteLine(Prime);

                if (Prime < PrimeLim)
                    Sum += Prime;
            }

            return Sum.ToString();
        }

        #region Helper Methods

        private static int NextPrime(int PrevPrimeNumber)
        {
            int Result = PrevPrimeNumber + 1;
            bool NextPrimeFound = false;

            while (!NextPrimeFound)
            {
                NextPrimeFound = true;

                for (int x = 2; x < Result; x++)
                {
                    if (Result % x == 0)
                    {
                        NextPrimeFound = false;
                        Result++;
                        break;
                    }
                }
            }

            return Result;
        }

        private static string Reverse(string text)
        {
            char[] cArray = text.ToCharArray();
            string reverse = String.Empty;
            for (int i = cArray.Length - 1; i > -1; i--)
            {
                reverse += cArray[i];
            }
            return reverse;
        }

        #endregion
    }
}
